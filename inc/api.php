<?php
/**
 * TWFY API wrapper
 *
 * Provides a wrapper around the TWFY API for use by the rest of the plugin, and extensions
 *
 * @since 0.4.0
 *
 * @package TheyWorkForYou
 * @subpackage Core
 */
/*  Copyright 2009  Philip John Ltd  (email : talkto@philipjohn.co.uk)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the Do What The Fuck You Want To Public License
	(WTFPL).
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	
	You should have received a copy of the Do What The Fuck You Want To
	Public License along with this program; if not, see
	http://wtfpl.net
*/

/**
 * Adds a wrapper to the TWFY API.
 *
 * @since 0.5.0
 * @access public
 */
Class TWFY_API {
	
	
	/**
	 * TWFY API key.
	 * 
	 * @since 0.4.0
	 * 
	 * @access private
	 * @var string $api_key API key for TheyWorkForYou as provided in settings
	 */
	private $api_key = '';
	
	/**
	 * Constructor.
	 *
	 * Doesn't do a thing yet.
	 *
	 * @since 0.5.0
	 */
	function __construct() {
		global $TWFY_Settings;
		
		// Get and set the API key
		$this->api_key = $TWFY_Settings->get_setting('twfy_api_key');
	}
	
	/**
	 * Get the cached data, if it exists.
	 * 
	 * Checks for a cached version of any request, returning it if so.
	 * Returns false if the cache is empty.
	 * 
	 * @since 0.5.0
	 */
	function get_cache( $cache_name ) {
		
		if ( $cache = get_transient( $cache_name ) )
			return $cache;
		
		return false;
		
	}
	
	/**
	 * Generates the URL to pass to cURL.
	 * 
	 * @since 0.5.0
	 * 
	 * @param string $method The API method
	 * @param array $params GET/POST parameter to pass along
	 */
	function generate_api_call( $method, $params = array() ) {
		
		if ( ! self::check_method( $method ) )
			return false;
		
		$url = 'http://www.theyworkforyou.com/api/';
		
		$url .= $method;
		
		$url .= '?key=' . $this->api_key;
		
		if ( ! empty( $params ) ):
		
			foreach ( $params as $param => $value ) {
				
				$param = urlencode( $param );
				$value = urlencode( $value );
				
				$url .= "&$param=$value";
				
			}
		
		endif;
		
		return $url;
		
	}
	
	/**
	 * Generates a simple ID to use as the cache name.
	 * 
	 * MD5's the API URL to produce something we can easily check on later.
	 * 
	 * @since 0.5.0
	 * 
	 * @see generate_api_call
	 * 
	 * @param string $api_call The URL generated by generate_api_call()
	 */
	function generate_cache_id( $api_call ) {
		
		// Sanitise, just in case
		$api_call = esc_url( $api_call );
		
		$call_hash = md5( $api_call );
		
		return "twfy_$call_hash";
		
	}
	
	/**
	 * Check API method.
	 * 
	 * A simple sanity check on the API method being requested,
	 * 
	 * @since 0.5.0
	 */
	function check_method( $method ) {
		
		$allowed_methods = array(
				'convertURL',
				'getConstituency',
				'getConstituencies',
				'getPerson',
				'getMP',
				'getMPinfo',
				'getMPsinfo',
				'getMPs',
				'getLord',
				'getLords',
				'getMLA',
				'getMLAs',
				'getMSP',
				'getMSPs',
				'getGeometry',
				'getBoundary',
				'getCommittee',
				'getDebates',
				'getWrans',
				'getWMS',
				'getHansard',
				'getComments',
				);
		
		if ( in_array( $method, $allowed_methods ) )
			return true;
		
		return false;
		
	}
	
	/**
	 * Fires off the request and returns the output
	 * 
	 * @since 0.5.0
	 * 
	 * @param string $api_call The TWFY API URL
	 * 
	 * @return string XML response
	 */
	function get( $api_call ) {
		
		// @todo Do we allow for other formats?
		
		$xml = simplexml_load_file( $api_call . '&output=xml' );
		
		return $xml;
		
	}
	
	/**
	 * Converts a parliament.uk Hansard URL into a TheyWorkForYou one, if possible.
	 * 
	 * @since 0.5.0
	 * 
	 * @param string $url The Hansard URL to convert to a TWFY one.
	 */
	function convertURL( $url ) {
		
		$url = esc_url( $url );
		
		$api_call = self::generate_api_call( 'convertURL', array( 'url' => $url ) );
		
		if ( $cache = self::get_cache( self::generate_cache_id( $api_call ) ) ):	
			$data = $cache;
		
		else :
		
			$data = self::get( $api_call );
		
		endif;
		
		// @todo figure out how to return the data
		
	}
	
}